// Code generated by capnpc-go. DO NOT EDIT.

package generated

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Book capnp.Struct

// Book_TypeID is the unique identifier for the type Book.
const Book_TypeID = 0xd139ad7b703bc3fc

func NewBook(s *capnp.Segment) (Book, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Book(st), err
}

func NewRootBook(s *capnp.Segment) (Book, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Book(st), err
}

func ReadRootBook(msg *capnp.Message) (Book, error) {
	root, err := msg.Root()
	return Book(root.Struct()), err
}

func (s Book) String() string {
	str, _ := text.Marshal(0xd139ad7b703bc3fc, capnp.Struct(s))
	return str
}

func (s Book) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Book) DecodeFromPtr(p capnp.Ptr) Book {
	return Book(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Book) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Book) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Book) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Book) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Book) Title() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Book) HasTitle() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Book) TitleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Book) SetTitle(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Book) Author() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Book) HasAuthor() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Book) AuthorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Book) SetAuthor(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Book_List is a list of Book.
type Book_List = capnp.StructList[Book]

// NewBook creates a new list of Book.
func NewBook_List(s *capnp.Segment, sz int32) (Book_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Book](l), err
}

// Book_Future is a wrapper for a Book promised by a client call.
type Book_Future struct{ *capnp.Future }

func (f Book_Future) Struct() (Book, error) {
	p, err := f.Future.Ptr()
	return Book(p.Struct()), err
}

const schema_a3f161972afd8244 = "x\xda\x12Hr`1\xe4\xdd\xcf\xc8\xc0\x14(\xc2\xca" +
	"\xf6\xff\xcfa\xeb\x82\xea\xb5\x96\x17\x19\x04\xe5\x19\xff\xbb" +
	"4\xfd\xd5\x9a\x9e\xf8q1\x03+\x13;\x03\x83\xe1Q" +
	"%F\xc1\xab\xec\x0c\x0c\x82\x17\xcb\x19t\xff\x17\xa7\x16" +
	"e&\xe6dV1'\x96d\xe6\xe7\xe9''\x16\xe4" +
	"\x15\xe8\x97\xa4\x16\x97\xe8\x81\x99VN\xec\xf9\xf9\xd9\x01" +
	"\x8c\x8c\x81\x1c\xcc,\x0c\x0c,\x8c\x0c\x0c\x82\x9aF\x0c" +
	"\x0c\x81*\xcc\x8c\x81\x06L\x8c\x82\x8c\x8c\"\x8c A" +
	"]+\x06\x86@\x0df\xc6@\x13&F\xf9\x92\xcc\x92" +
	"\x9cTF\x1e\x06&F\x1e\x06F\xfb\xc4\xd2\x92\x8c\xfc" +
	"\"\x18\x17\x10\x00\x00\xff\xff:\xf6(\xd4"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_a3f161972afd8244,
		Nodes: []uint64{
			0xd139ad7b703bc3fc,
		},
		Compressed: true,
	})
}
